import openai

# 设置ChatGPT的API密钥
from tenacity import retry, stop_after_attempt, wait_exponential

openai.api_key = "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"
system_gen_system_prompt = """Your job is to generate system prompts for GPT-4, given a description of the use-case and some test cases.

The prompts you will be generating will be for freeform tasks, such as generating a landing page headline, an intro paragraph, solving a math problem, etc.

In your generated prompt, you should describe how the AI should behave in plain English. Include what it will see, and what it's allowed to output. Be creative with prompts to get the best possible results. The AI knows it's an AI -- you don't need to tell it this.

You will be graded based on the performance of your prompt... but don't cheat! You cannot include specifics about the test cases in your prompt. Any prompts with examples will be disqualified.

Most importantly, output NOTHING but the prompt. Do not include anything else in your message."""

ranking_system_prompt = """Your job is to rank the quality of two outputs generated by different prompts. The prompts are used to generate a response for a given task.

You will be provided with the task description, the test prompt, and two generations - one for each system prompt.

Rank the generations in order of quality. If Generation A is better, respond with 'A'. If Generation B is better, respond with 'B'.

Remember, to be considered 'better', a generation must not just be good, it must be noticeably superior to the other.

Also, keep in mind that you are a very harsh critic. Only rank a generation as better if it truly impresses you more than the other.

Respond with your ranking, and nothing else. Be fair and unbiased in your judgement."""
K = 32

# 创建一个函数，用于调用ChatGPT API生成聊天响应
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=70))
def generate_chat_response(description, user_input, number_od_prompts):
    response = openai.Completion.create(
        model='gpt-3.5-turbo',
        messages=[
            {"role": "system", "content": system_gen_system_prompt},
            {"role": "user",
             "content": f"Here are some test cases:`{user_input}`\n\nHere is the description of the use-case: `{description.strip()}`\n\nRespond with your prompt, and nothing else. Be creative."}
        ],
        temperature=0.7,
        n=number_od_prompts,
    )
    prompts = []
    # response是生成回应列表，列表中的每一个元素为字典，role：content，提前其中的内容
    for i in response.choices:
        prompts.append(i.message.content)
    return prompts


# 测试候选提示
def test_candidate_prompts():
    pass


def expected_score(r1, r2):
    return 1 / (1 + 10 ** ((r2 - r1) / 400))


def update_elo(r1, r2, score1):
    e1 = expected_score(r1, r2)
    e2 = expected_score(r2, r1)
    return r1 + K * (score1 - e1), r2 + K * ((1 - score1) - e2)
#得到分数
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=70))
def get_score(description, test_case, pos1, pos2, ranking_model_name, ranking_model_temperature):
    score = openai.ChatCompletion.create(
        model=ranking_model_name,
        messages=[
            {"role": "system", "content": ranking_system_prompt},
            {"role": "user", "content": f"""Task: {description.strip()}
Prompt: {test_case['prompt']}
Generation A: {pos1}
Generation B: {pos2}"""}
        ],
        logit_bias={
            '32': 100,  # 'A' token
            '33': 100,  # 'B' token
        },
        max_tokens=1,
        temperature=ranking_model_temperature,
    ).choices[0].message.content
    return score


if __name__ == '__main__':
    # 在主程序中，调用generate_chat_response函数并传入用户输入，以生成聊天响应
    user_input = [
        {
            'prompt': 'Promoting an innovative new fitness app, Smartly',
        },
        {
            'prompt': 'Why a vegan diet is beneficial for your health',
        },
        {
            'prompt': 'Introducing a new online course on digital marketing',
        },
        # ...
    ]
    description = "Given a prompt, generate a landing page headline"
    response = generate_chat_response(description, user_input, 5)
    print(response)
